OBJECTIVE 
Implementation of minimum spanning tree using KRUSKAL’S ALGORITHM.

METHODOLOGY
1.Sort all the edges in non-decreasing order of their weight.
2. Pick the smallest edge. Check if it forms a cycle with the spanning tree formed so far. If cycle is not formed, include this edge. Else, discard it.
3. Repeat step#2 until there are (n-1) edges in the spanning tree.

INPUT
User should enter the no. of vertices which he wants to be in the graph and the costof each vertices.

OUTPUT
The edges of min. spanning tree will be displayed and the minimum cost.

CODE
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
    int i,j,k,a,b,u,v,n,t=1;
    int min,mincost=0,cost[9][9],p[9];
    int find(int);
    int uni(int,int);
    void main()
    {
    	printf(" Kruskal's Algorithm\n");
    	printf("\nEnter the no. of vertices");
    	scanf("%d",&n);
    	printf("\nEnter the cost matrix:\n");
    	for(i=1;i<=n;i++)
    	{
    		for(j=1;j<=n;j++)
    		{
    			scanf("%d",&cost[i][j]);
    			if(cost[i][j]==0)
    				cost[i][j]=999;
    		}
    	}
    	printf("The edges of Minimum Cost Spanning Tree are\n");
    	while(t < n)
    	{
    		for(i=1,min=999;i<=n;i++)
    		{
    			for(j=1;j <= n;j++)
    			{
    				if(cost[i][j] < min)
    				{
    					min=cost[i][j];
    					a=u=i;
    					b=v=j;
    				}
    			}
    		}
    		u=find(u);
    		v=find(v);
    		if(uni(u,v))
    		{
    			printf("%d edge (%d,%d) =%d\n",t++,a,b,min);
    			mincost +=min;
    		}
    		cost[a][b]=cost[b][a]=999;
    	}
    	printf("\n\tMin cost = %d\n",mincost);
    	getch();
    }
    int find(int i)
    {
    	while(p[i])
    	i=pi];
    	return i;
    }
    int uni(int i,int j)
    {
    	if(i!=j)
    	{
    		p[j]=i;
    		return 1;
    	}
    	return 0;
    }

OUTPUT

Kruskal's Algorithm
 
Enter the no. of vertices:3  
 
Enter the cost  matrix: 
9
8
7
6
5
4
3
2
3
The edges of Minimum Cost Spanning Tree are  
1 edge (3,2) =2  
2 edge (3,1) =3  
 
Min cost = 5


